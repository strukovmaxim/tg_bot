from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from data import carts, orders_data, all_orders, users_data, id_to_item
from cart import get_cart_text, cart_totals
from keyboards import main_menu
from config import ADMIN_ID
from aiogram import Bot

def register_order_handlers(dp):

    @dp.callback_query(lambda c: c.data == "checkout")
    async def checkout(callback: types.CallbackQuery):
        uid = callback.from_user.id
        if uid not in carts or not carts[uid]:
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
            return
        if uid in users_data:
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –î–∞", callback_data="use_saved_contacts")
            kb.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="enter_name")
            kb.adjust(1)
            await callback.message.edit_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã?", reply_markup=kb.as_markup())
        else:
            orders_data[uid] = {"step": "name"}
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é, –∞ —Ç–∞–∫ –∂–µ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏")
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "use_saved_contacts")
    async def use_saved(callback: types.CallbackQuery):
        uid = callback.from_user.id
        orders_data[uid] = {"step": "rental_period"}
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-3 —Å–µ–Ω—Ç—è–±—Ä—è)")
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "enter_name")
    async def enter_name(callback: types.CallbackQuery):
        uid = callback.from_user.id
        orders_data[uid] = {"step": "name"}
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é, –∞ —Ç–∞–∫ –∂–µ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏")
        await callback.answer()

    @dp.message(lambda m: m.text and m.from_user.id in orders_data)
    async def handle_order_steps(message: types.Message, bot: Bot):
        uid = message.from_user.id
        step = orders_data[uid].get("step")
        if step == "name":
            orders_data[uid]["name"] = message.text
            orders_data[uid]["step"] = "phone"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")
        elif step == "phone":
            orders_data[uid]["phone"] = message.text
            orders_data[uid]["step"] = "rental_period"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-3 —Å–µ–Ω—Ç—è–±—Ä—è)")
        elif step == "rental_period":
            orders_data[uid]["period"] = message.text
            orders_data[uid]["step"] = "comment"
            await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª)")
        elif step == "comment":
            orders_data[uid]["comment"] = message.text
            cart = carts.get(uid, {})
            nal, beznal = cart_totals(cart)
            summary = (
                f"–í–∞—à –∑–∞–∫–∞–∑:\n\n{get_cart_text(uid)}\n\n"
                f"–ò–º—è/–Ω–∏–∫: {orders_data[uid]['name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {orders_data[uid]['phone']}\n"
                f"–ê—Ä–µ–Ω–¥–∞: {orders_data[uid]['period']}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {orders_data[uid]['comment']}\n\n"
                f"üí∞ –ù–∞–ª–∏—á–Ω—ã–µ: {nal}‚ÇΩ\nüí≥ –ë–µ–∑–Ω–∞–ª (+9%): {beznal}‚ÇΩ"
            )
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")
            kb.adjust(1)
            await message.answer(summary, reply_markup=kb.as_markup())
            orders_data[uid]["step"] = "review"

    @dp.callback_query(lambda c: c.data == "confirm_order")
    async def confirm_order(callback: types.CallbackQuery, bot: Bot):
        uid = callback.from_user.id
        order = {
            "user_id": uid,
            "items": carts.get(uid, {}).copy(),
            "name": orders_data[uid].get("name"),
            "phone": orders_data[uid].get("phone"),
            "period": orders_data[uid].get("period"),
            "comment": orders_data[uid].get("comment"),
            "status": "pending"
        }
        all_orders.append(order)
        users_data[uid] = {"name": order["name"], "phone": order["phone"]}
        await bot.send_message(ADMIN_ID, f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {order['name']}\n\n{get_cart_text(uid)}")
        carts[uid] = {}
        await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É ‚úÖ", reply_markup=main_menu(uid))
        orders_data.pop(uid, None)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "cancel_order")
    async def cancel_order(callback: types.CallbackQuery):
        uid = callback.from_user.id
        orders_data.pop(uid, None)
        await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu(uid))
        await callback.answer()
