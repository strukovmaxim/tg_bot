from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot
from datetime import datetime

from data import carts, id_to_item, orders_data, all_orders
from cart import get_cart_text, cart_totals
from config import ADMIN_ID


def register_order_handlers(dp):

    # checkout –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    @dp.callback_query(lambda c: c.data == "checkout")
    async def checkout(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        if not carts.get(user_id):
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
            return

        if user_id in orders_data and "name" in orders_data[user_id] and "phone" in orders_data[user_id]:
            # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ", callback_data="use_saved_contacts")
            kb.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ", callback_data="enter_new_contacts")
            kb.adjust(1)
            await callback.message.answer(
                f"üìá –ú—ã –Ω–∞—à–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
                f"–ò–º—è: {orders_data[user_id]['name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {orders_data[user_id]['phone']}\n\n"
                "–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?",
                reply_markup=kb.as_markup()
            )
        else:
            # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é, –∞ —Ç–∞–∫ –∂–µ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏:")
            orders_data[user_id] = {"step": "name"}
        await callback.answer()

    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    @dp.callback_query(lambda c: c.data == "use_saved_contacts")
    async def use_saved_contacts(callback: types.CallbackQuery):
        uid = callback.from_user.id
        orders_data[uid]["step"] = "rental_period"
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.09 10:00 ‚Äî 03.09 19:00):")
        await callback.answer()

    # –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    @dp.callback_query(lambda c: c.data == "enter_new_contacts")
    async def enter_new_contacts(callback: types.CallbackQuery):
        uid = callback.from_user.id
        orders_data[uid] = {"step": "name"}  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é, –∞ —Ç–∞–∫ –∂–µ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏:")
        await callback.answer()

    # –≤–≤–æ–¥ –∏–º–µ–Ω–∏
    @dp.message(lambda m: orders_data.get(m.from_user.id, {}).get("step") == "name")
    async def process_name(message: types.Message):
        user_id = message.from_user.id
        name = message.text.strip()
        if not name:
            await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        orders_data[user_id]["name"] = name
        orders_data[user_id]["step"] = "phone"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    # –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    @dp.message(lambda m: orders_data.get(m.from_user.id, {}).get("step") == "phone")
    async def process_phone(message: types.Message):
        user_id = message.from_user.id
        phone = message.text.strip()
        if not phone:
            await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        orders_data[user_id]["phone"] = phone
        orders_data[user_id]["step"] = "rental_period"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.09 10:00 ‚Äî 03.09 19:00):")

    # –≤–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞
    @dp.message(lambda m: orders_data.get(m.from_user.id, {}).get("step") == "rental_period")
    async def process_period(message: types.Message):
        user_id = message.from_user.id
        period = message.text.strip()
        if not period:
            await message.answer("–ü–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        orders_data[user_id]["rental_period"] = period
        orders_data[user_id]["step"] = "comment"
        await message.answer(
            "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞, –º–µ—Ö–∞–Ω–∏–∫, —Ç–æ—á–∫–∞ –≤—Å—Ç—Ä–µ—á–∏). "
            "–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª."
        )

    # –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —á–µ–∫
    @dp.message(lambda m: orders_data.get(m.from_user.id, {}).get("step") == "comment")
    async def process_comment(message: types.Message):
        user_id = message.from_user.id
        comment = message.text.strip()
        if comment == "-":
            comment = "–Ω–µ—Ç"
        orders_data[user_id]["comment"] = comment
        orders_data[user_id]["step"] = "review"

        nal, beznal = cart_totals(carts[user_id])
        cart_text = get_cart_text(user_id)

        text = (
            f"üì¶ –í–∞—à –∑–∞–∫–∞–∑:\n\n"
            f"{cart_text}\n\n"
            f"–ò–º—è: {orders_data[user_id]['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {orders_data[user_id]['phone']}\n"
            f"üïí –ü–µ—Ä–∏–æ–¥: {orders_data[user_id]['rental_period']}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {orders_data[user_id]['comment']}\n\n"
            f"–ò—Ç–æ–≥–æ: üí∞ {nal}‚ÇΩ | üí≥ {beznal}‚ÇΩ"
        )

        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
        kb.adjust(1)
        await message.answer(text, reply_markup=kb.as_markup())

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    @dp.callback_query(lambda c: c.data == "confirm_order")
    async def confirm_order(callback: types.CallbackQuery, bot: Bot):
        uid = callback.from_user.id
        data = orders_data.get(uid)
        if not data or data.get("step") != "review":
            await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)
            return

        # —Å–æ–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑
        order = {
            "user_id": uid,
            "items": carts.get(uid, {}).copy(),
            "name": data.get("name"),
            "phone": data.get("phone"),
            "period": data.get("rental_period"),
            "comment": data.get("comment"),
            "status": "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            "created_at": datetime.now().strftime("%d.%m.%Y %H:%M")
        }
        all_orders.append(order)

        # —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã
        nal, beznal = cart_totals(order["items"])
        cart_text = get_cart_text(uid, order["items"])

        # —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_text = (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {order['name']} (id {uid})\n"
            f"üìû {order['phone']}\n"
            f"üïí –ü–µ—Ä–∏–æ–¥: {order['period']}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['comment']}\n\n"
            f"{cart_text}\n\n"
            f"–ò—Ç–æ–≥–æ: üí∞ {nal}‚ÇΩ | üí≥ {beznal}‚ÇΩ"
        )

        # –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω—É
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{uid}")
        kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{uid}")
        kb.adjust(2)
        await bot.send_message(ADMIN_ID, admin_text, reply_markup=kb.as_markup())

        # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_text = (
            f"–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É ‚úÖ\n\n"
            f"üì¶ –í–∞—à –∑–∞–∫–∞–∑:\n\n"
            f"{cart_text}\n\n"
            f"–ò–º—è: {order['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
            f"üïí –ü–µ—Ä–∏–æ–¥: {order['period']}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['comment']}\n\n"
            f"–ò—Ç–æ–≥–æ: üí∞ {nal}‚ÇΩ | üí≥ {beznal}‚ÇΩ"
        )
        await callback.message.edit_text(user_text)

        # –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã, –Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è
        carts[uid] = {}
        if uid in orders_data:
            orders_data[uid].pop("step", None)
            orders_data[uid].pop("rental_period", None)
            orders_data[uid].pop("comment", None)

        await callback.answer()

    # –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    @dp.callback_query(lambda c: c.data == "cancel_order")
    async def cancel_order(callback: types.CallbackQuery):
        uid = callback.from_user.id
        if uid in orders_data:
            orders_data[uid].pop("step", None)
            orders_data[uid].pop("rental_period", None)
            orders_data[uid].pop("comment", None)
        await callback.message.edit_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω ‚ùå")
        await callback.answer()

    # –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑
    @dp.callback_query(lambda c: c.data.startswith("admin_confirm_"))
    async def admin_confirm(callback: types.CallbackQuery, bot: Bot):
        uid = int(callback.data.split("_")[-1])

        order = next((o for o in all_orders if o["user_id"] == uid and o["status"] == "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"), None)
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
            return

        order["status"] = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        nal, beznal = cart_totals(order["items"])
        cart_text = get_cart_text(uid, order["items"])
        text_user = (
            f"üéâ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n"
            f"{cart_text}\n\n"
            f"–ò–º—è: {order['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
            f"üïí –ü–µ—Ä–∏–æ–¥: {order['period']}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['comment']}\n\n"
            f"–ò—Ç–æ–≥–æ: üí∞ {nal}‚ÇΩ | üí≥ {beznal}‚ÇΩ"
        )
        await bot.send_message(uid, text_user)

        await callback.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç {order['name']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–æ–º")
        await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")

    # –∞–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–∫–∞–∑
    @dp.callback_query(lambda c: c.data.startswith("admin_decline_"))
    async def admin_decline(callback: types.CallbackQuery, bot: Bot):
        uid = int(callback.data.split("_")[-1])

        order = next((o for o in all_orders if o["user_id"] == uid and o["status"] == "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"), None)
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
            return

        order["status"] = "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω"

        await bot.send_message(uid, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–æ–º.")

        await callback.message.edit_text(f"‚ùå –ó–∞–∫–∞–∑ –æ—Ç {order['name']} –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–æ–º")
        await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω!")
