import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

API_TOKEN = "7638897879:AAGhxCf1nBPNBmVWiXCKjvqdAJWBsj-Jc0k"
ADMIN_ID = 136480596  # —Ç–≤–æ–π Telegram ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–∞—Ç–∞–ª–æ–≥ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
catalog = {
    "–ö–∞–º–µ—Ä—ã": {
        1: {"name": "Canon C70", "price": 6000},
        2: {"name": "Canon C80", "price": 8000},
    },
    "–û–±—ä–µ–∫—Ç–∏–≤—ã / –û–ø—Ç–∏–∫–∞": {
        3: {"name": "Laowa Ranger 17-50", "price": 4000},
        4: {"name": "DZO Arles", "price": 15000},
    },
    "–ó–≤—É–∫": {
        5: {"name": "Rode NTG-2", "price": 500},
        6: {"name": "Hollyland Mars M1", "price": 2000},
        7: {"name": "Hollyland Solidcom 4S", "price": 4000},
    },
    "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã / –ú–æ–Ω—Ç–∞–∂": {
        8: {"name": "Tilta Nano Focus II", "price": 2300},
        9: {"name": "Tilta Mirage", "price": 1000},
        10: {"name": "–ü–ª–æ—â–∞–¥–∫–∞ V-mount", "price": 1000},
        11: {"name": "Cine saddle", "price": 500},
        12: {"name": "V-mount 99", "price": 500},
        13: {"name": "–¢–µ–ª–µ–≥–∞ OnStage", "price": 1000},
        14: {"name": "–ì—Ä–∏–ø–Ω—è –∏ –∂–µ–ª–µ–∑–∫–∏", "price": 1000},
        15: {"name": "–®—Ç–∞—Ç–∏–≤", "price": 3000},
        16: {"name": "–°—É–º–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è", "price": 700},
    },
    "–§–ª–µ—à–∫–∏ / –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã": {
        17: {"name": "–§–ª–µ—à–∫–∏ 256–≥–±", "price": 500},
        18: {"name": "BP-30a", "price": 500},
        19: {"name": "NP-F970", "price": 500},
    },
}
carts = {}          # –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
orders_data = {}    # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
def get_cart_text(user_id):
    cart = carts.get(user_id, [])
    if not cart:
        return "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    for category, items in catalog.items():
        for item_id, item in items.items():
            if item_id in cart:
                text += f"- {item['name']} ‚Äî {item['price']}‚ÇΩ\n"
                total += item['price']
    text += f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    return text

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="menu_categories")
    kb.button(text="–ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")
    kb.button(text="–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin")
    kb.adjust(1)
    return kb.as_markup()

# /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message(Command("start"))
async def start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã —Ç–µ—Ö–Ω–∏–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤, "
        "–¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∞—Ä–µ–Ω–¥—É.\n\n"
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    )
    await message.answer(text, reply_markup=main_menu())

# –ú–µ–Ω—é ¬´–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º¬ª
@dp.callback_query(lambda c: c.data == "contact_admin")
async def contact_admin(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram: @maximstrukov")
    await callback.answer()

# –ú–µ–Ω—é ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª
@dp.callback_query(lambda c: c.data == "menu_categories")
async def show_categories(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    for category in catalog.keys():
        kb.button(text=category, callback_data=f"cat_{category}")
    kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    kb.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())

# –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –ø–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query(lambda c: c.data.startswith("cat_"))
async def show_category(callback: types.CallbackQuery):
    category = callback.data.replace("cat_", "")
    kb = InlineKeyboardBuilder()
    for item_id, item in catalog[category].items():
        kb.button(text=f"{item['name']} ({item['price']}‚ÇΩ)", callback_data=f"add_{item_id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_categories")
    kb.adjust(1)
    await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb.as_markup())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(lambda c: c.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item_id = int(callback.data.split("_")[1])
    carts.setdefault(user_id, []).append(item_id)
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    await callback.message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=main_menu())

# –ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query(lambda c: c.data == "show_cart")
async def show_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    text = get_cart_text(user_id)
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
    kb.button(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
    kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    kb.adjust(1)
    await callback.message.edit_text(text, reply_markup=kb.as_markup())

# –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    carts[user_id] = []
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await show_cart(callback)

# –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.callback_query(lambda c: c.data == "checkout")
async def checkout(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not carts.get(user_id):
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return
    orders_data[user_id] = {"step": "name"}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ @–Ω–∏–∫:")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –∑–∞–∫–∞–∑–∞
@dp.message()
async def handle_order_steps(message: types.Message):
    user_id = message.from_user.id
    if user_id not in orders_data:
        return
    step = orders_data[user_id].get("step")

    if step == "name":
        orders_data[user_id]["name"] = message.text
        orders_data[user_id]["step"] = "phone"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")

    elif step == "phone":
        orders_data[user_id]["phone"] = message.text
        orders_data[user_id]["step"] = "rental_period"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å 25.08 –ø–æ 28.08):")

    elif step == "rental_period":
        orders_data[user_id]["rental_period"] = message.text
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
        cart_text = get_cart_text(user_id)
        order_summary = (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{cart_text}\n\n"
            f"–ò–º—è/–Ω–∏–∫: {orders_data[user_id]['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {orders_data[user_id]['phone']}\n"
            f"–ê—Ä–µ–Ω–¥–∞: {orders_data[user_id]['rental_period']}"
        )
        await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! ‚úÖ")
        await bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{order_summary}")
        # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏ –¥–∞–Ω–Ω—ã—Ö
        carts[user_id] = []
        orders_data.pop(user_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("[LOG] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
