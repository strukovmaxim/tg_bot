import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- –ö–æ–Ω—Ñ–∏–≥ ---
API_TOKEN = "7638897879:AAGhxCf1nBPNBmVWiXCKjvqdAJWBsj-Jc0k"
ADMIN_ID = 136480596  # —Ç–≤–æ–π Telegram ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –ö–∞—Ç–∞–ª–æ–≥ ---
catalog = {
    "–ö–∞–º–µ—Ä—ã": {
        1: {"name": "Canon C70", "price": 6000},
        2: {"name": "Canon C80", "price": 8000},
    },
    "–û–±—ä–µ–∫—Ç–∏–≤—ã / –û–ø—Ç–∏–∫–∞": {
        3: {"name": "Laowa Ranger 17-50", "price": 4000},
        4: {"name": "DZO Arles", "price": 15000},
    },
    "–ó–≤—É–∫": {
        5: {"name": "Rode NTG-2", "price": 500},
        6: {"name": "Hollyland Mars M1", "price": 2000},
        7: {"name": "Hollyland Solidcom 4S", "price": 4000},
    },
    "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã / –ú–æ–Ω—Ç–∞–∂": {
        8: {"name": "Tilta Nano Focus II", "price": 2300},
        9: {"name": "Tilta Mirage", "price": 1000},
        10: {"name": "–ü–ª–æ—â–∞–¥–∫–∞ V-mount", "price": 1000},
        11: {"name": "Cine saddle", "price": 500},
        12: {"name": "V-mount 99", "price": 500},
        13: {"name": "–¢–µ–ª–µ–≥–∞ OnStage", "price": 1000},
        14: {"name": "–ì—Ä–∏–ø–Ω—è –∏ –∂–µ–ª–µ–∑–∫–∏", "price": 1000},
        15: {"name": "–®—Ç–∞—Ç–∏–≤", "price": 3000},
        16: {"name": "–°—É–º–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è", "price": 700},
    },
    "–§–ª–µ—à–∫–∏ / –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã": {
        17: {"name": "–§–ª–µ—à–∫–∏ 256–≥–±", "price": 500},
        18: {"name": "BP-30a", "price": 500},
        19: {"name": "NP-F970", "price": 500},
    },
}

# –ë—ã—Å—Ç—Ä—ã–π –∏–Ω–¥–µ–∫—Å item_id -> item
id_to_item = {}
for cat_items in catalog.values():
    for iid, item in cat_items.items():
        id_to_item[iid] = item

# --- –•—Ä–∞–Ω–∏–ª–∏—â–∞ ---
carts: dict[int, dict[int, int]] = {}      # user_id ‚Üí { item_id: count }
orders_data: dict[int, dict] = {}          # user_id ‚Üí –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
all_orders: list[dict] = []                # –≤—Å–µ –∑–∞–∫–∞–∑—ã

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_cart_summary(user_id: int) -> tuple[int, int]:
    cart = carts.get(user_id, {})
    total_items = sum(cart.values())
    total_price = sum(id_to_item[iid]["price"] * qty for iid, qty in cart.items())
    return total_items, total_price

def get_cart_text(user_id: int) -> str:
    cart = carts.get(user_id, {})
    if not cart:
        return "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    lines, total = ["üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"], 0
    for iid, qty in cart.items():
        item = id_to_item[iid]
        price = item["price"] * qty
        lines.append(f"- {item['name']} √ó {qty} ‚Äî {price}‚ÇΩ")
        total += price
    lines.append(f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ")
    return "\n".join(lines)

def main_menu(user_id: int):
    items, price = get_cart_summary(user_id)
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="menu_categories")
    kb.button(text=f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({items} | {price}‚ÇΩ)", callback_data="show_cart")
    kb.button(text="üë§ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin")
    kb.adjust(1)
    return kb.as_markup()

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã —Ç–µ—Ö–Ω–∏–∫–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å–æ–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑."
    )
    await message.answer(text, reply_markup=main_menu(message.from_user.id))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é ---
@dp.callback_query(lambda c: c.data == "contact_admin")
async def contact_admin(callback: types.CallbackQuery):
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É: @maximstrukov")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "menu_categories")
async def show_categories(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    for category in catalog.keys():
        kb.button(text=category, callback_data=f"cat_{category}")
    kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    kb.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(callback.from_user.id))

@dp.callback_query(lambda c: c.data.startswith("cat_"))
async def show_category(callback: types.CallbackQuery):
    category = callback.data.replace("cat_", "")
    kb = InlineKeyboardBuilder()
    for item_id, item in catalog[category].items():
        kb.button(text=f"{item['name']} ({item['price']}‚ÇΩ)", callback_data=f"add_{item_id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_categories")
    kb.adjust(1)
    await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}", reply_markup=kb.as_markup())

# --- –ö–æ—Ä–∑–∏–Ω–∞ ---
@dp.callback_query(lambda c: c.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item_id = int(callback.data.split("_")[1])
    carts.setdefault(user_id, {})
    carts[user_id][item_id] = carts[user_id].get(item_id, 0) + 1
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_menu(user_id))

@dp.callback_query(lambda c: c.data == "show_cart")
async def show_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    text = get_cart_text(user_id)
    kb = InlineKeyboardBuilder()
    cart = carts.get(user_id, {})

    if cart:
        for iid in cart.keys():
            name = id_to_item[iid]["name"]
            kb.button(text=f"‚ûï {name}", callback_data=f"inc_{iid}")
            kb.button(text=f"‚ûñ {name}", callback_data=f"dec_{iid}")
        kb.adjust(2)
        kb.button(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
        kb.button(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
        kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        kb.adjust(2, 1)
    else:
        kb.button(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="menu_categories")
        kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        kb.adjust(1)

    await callback.message.edit_text(text, reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data.startswith("inc_"))
async def inc_item(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item_id = int(callback.data.split("_")[1])
    carts.setdefault(user_id, {})
    carts[user_id][item_id] = carts[user_id].get(item_id, 0) + 1
    await show_cart(callback)

@dp.callback_query(lambda c: c.data.startswith("dec_"))
async def dec_item(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item_id = int(callback.data.split("_")[1])
    if carts.get(user_id, {}).get(item_id, 0) > 1:
        carts[user_id][item_id] -= 1
    else:
        carts[user_id].pop(item_id, None)
    await show_cart(callback)

@dp.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    carts[callback.from_user.id] = {}
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await show_cart(callback)

# --- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ---
@dp.callback_query(lambda c: c.data == "checkout")
async def checkout(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not carts.get(user_id):
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        await callback.answer()
        return
    orders_data[user_id] = {"step": "name"}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é, –∞ —Ç–∞–∫ –∂–µ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏ @telegram")
    await callback.answer()

@dp.message()
async def handle_order_steps(message: types.Message):
    user_id = message.from_user.id
    if user_id not in orders_data:
        return
    step = orders_data[user_id].get("step")

    if step == "name":
        orders_data[user_id]["name"] = message.text.strip()
        orders_data[user_id]["step"] = "phone"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")

    elif step == "phone":
        orders_data[user_id]["phone"] = message.text.strip()
        orders_data[user_id]["step"] = "rental_period"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å 25.08 –ø–æ 28.08):")

    elif step == "rental_period":
        orders_data[user_id]["rental_period"] = message.text.strip()
        cart_text = get_cart_text(user_id)
        order_summary = (
            f"üì¶ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑:\n\n{cart_text}\n\n"
            f"–ò–º—è/–Ω–∏–∫: {orders_data[user_id]['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {orders_data[user_id]['phone']}\n"
            f"–ê—Ä–µ–Ω–¥–∞: {orders_data[user_id]['rental_period']}"
        )
        orders_data[user_id]["step"] = "review"
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")
        kb.adjust(2)
        await message.answer(order_summary, reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = orders_data.get(user_id)
    if not data or data.get("step") != "review":
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)
        return
    cart_text = get_cart_text(user_id)
    final_text = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{cart_text}\n\n"
        f"–ò–º—è/–Ω–∏–∫: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ê—Ä–µ–Ω–¥–∞: {data['rental_period']}"
    )
    order = {
        "user_id": user_id,
        "name": data["name"],
        "phone": data["phone"],
        "period": data["rental_period"],
        "items": carts.get(user_id, {}).copy(),
        "status": "pending"
    }
    all_orders.append(order)
    await send_order_to_admin(order, final_text)
    await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. ‚úÖ")
    carts[user_id] = {}
    orders_data.pop(user_id, None)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel_order")
async def cancel_order(callback: types.CallbackQuery):
    orders_data.pop(callback.from_user.id, None)
    await callback.message.edit_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(callback.from_user.id))
    await callback.answer()

# --- –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ ---
async def send_order_to_admin(order, text):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{order['user_id']}")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{order['user_id']}")
    kb.adjust(2)
    await bot.send_message(ADMIN_ID, text, reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data.startswith("admin_confirm_"))
async def admin_confirm(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[2])
    for order in reversed(all_orders):
        if order["user_id"] == user_id and order["status"] == "pending":
            order["status"] = "confirmed"
            await bot.send_message(user_id, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–æ–º!")
            await callback.message.edit_text(callback.message.text + "\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
            return
    await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("admin_decline_"))
async def admin_decline(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[2])
    for order in reversed(all_orders):
        if order["user_id"] == user_id and order["status"] == "pending":
            order["status"] = "declined"
            await bot.send_message(user_id, "‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–æ–º.")
            await callback.message.edit_text(callback.message.text + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
            return
    await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

@dp.message(Command("orders"))
async def list_orders(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    if not all_orders:
        await message.answer("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for order in all_orders[-5:]:
        text += (
            f"üë§ {order['name']} | {order['phone']}\n"
            f"üìÖ {order['period']}\n"
            f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
            "------\n"
        )
    await message.answer(text)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("[LOG] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
