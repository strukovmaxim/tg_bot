import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- –ö–æ–Ω—Ñ–∏–≥ ---
API_TOKEN = "7638897879:AAGhxCf1nBPNBmVWiXCKjvqdAJWBsj-Jc0k"
ADMIN_ID = 136480596

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –ö–∞—Ç–∞–ª–æ–≥ ---
catalog = {
    "–ö–∞–º–µ—Ä—ã": {
        1: {"name": "Canon C70", "price": 6000, "desc": "–ö–∏–Ω–æ–∫–∞–º–µ—Ä–∞ 4K, Super35, Dual Gain Output"},
        2: {"name": "Canon C80", "price": 8000, "desc": "–ö–∏–Ω–æ–∫–∞–º–µ—Ä–∞ —Å 6K —Å–µ–Ω—Å–æ—Ä–æ–º –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–≤—Ç–æ—Ñ–æ–∫—É—Å–æ–º"},
    },
    "–û–±—ä–µ–∫—Ç–∏–≤—ã / –û–ø—Ç–∏–∫–∞": {
        3: {"name": "Laowa Ranger 17-50", "price": 4000, "desc": "–ö–∏–Ω–æ-–∑—É–º –¥–ª—è Super35"},
        4: {"name": "DZO Arles", "price": 15000, "desc": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–∏–Ω–æ-–æ–ø—Ç–∏–∫–∞"},
    },
    "–ó–≤—É–∫": {
        5: {"name": "Rode NTG-2", "price": 500, "desc": "–ü—É—à–∫–∞-–º–∏–∫—Ä–æ—Ñ–æ–Ω"},
        6: {"name": "Hollyland Mars M1", "price": 2000, "desc": "–ú–æ–Ω–∏—Ç–æ—Ä-–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫ –≤–∏–¥–µ–æ"},
        7: {"name": "Hollyland Solidcom 4S", "price": 4000, "desc": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"},
    },
    "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã / –ú–æ–Ω—Ç–∞–∂": {
        8: {"name": "Tilta Nano Focus II", "price": 2300, "desc": "Follow Focus —Å–∏—Å—Ç–µ–º–∞"},
        9: {"name": "Tilta Mirage", "price": 1000, "desc": "–ú–∞—Ç–±–æ–∫—Å —Å –≤–∞—Ä–∏-ND —Ñ–∏–ª—å—Ç—Ä–æ–º"},
        10: {"name": "–ü–ª–æ—â–∞–¥–∫–∞ V-mount", "price": 1000, "desc": "–ö—Ä–µ–ø–ª–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–π"},
        11: {"name": "Cine saddle", "price": 500, "desc": "–ú—è–≥–∫–∞—è –æ–ø–æ—Ä–∞ –¥–ª—è –∫–∞–º–µ—Ä—ã"},
        12: {"name": "V-mount 99", "price": 500, "desc": "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä 99Wh"},
        13: {"name": "–¢–µ–ª–µ–≥–∞ OnStage", "price": 1000, "desc": "–¢–µ–ª–µ–∂–∫–∞ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"},
        14: {"name": "–ì—Ä–∏–ø–Ω—è –∏ –∂–µ–ª–µ–∑–∫–∏", "price": 1000, "desc": "–†–∞–∑–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞"},
        15: {"name": "–®—Ç–∞—Ç–∏–≤", "price": 3000, "desc": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à—Ç–∞—Ç–∏–≤"},
        16: {"name": "–°—É–º–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è", "price": 700, "desc": "–°—É–º–∫–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏"},
    },
    "–§–ª–µ—à–∫–∏ / –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã": {
        17: {"name": "–§–ª–µ—à–∫–∏ 256–≥–±", "price": 500, "desc": "–ö–∞—Ä—Ç—ã –ø–∞–º—è—Ç–∏ 256GB"},
        18: {"name": "BP-30a", "price": 500, "desc": "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä BP-30a"},
        19: {"name": "NP-F970", "price": 500, "desc": "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä NP-F970"},
    },
}

# --- –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø ---
id_to_item = {iid: item for cat in catalog.values() for iid, item in cat.items()}

# --- –•—Ä–∞–Ω–∏–ª–∏—â–∞ ---
carts: dict[int, dict[int, int]] = {}
orders_data: dict[int, dict] = {}
all_orders: list[dict] = []
users_data: dict[int, dict] = {}  # –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ---
def get_cart_text(user_id: int) -> str:
    cart = carts.get(user_id, {})
    if not cart:
        return "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    lines, total = ["üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"], 0
    for iid, qty in cart.items():
        item = id_to_item[iid]
        price = item["price"] * qty
        lines.append(f"- {item['name']} √ó {qty} ‚Äî {price}‚ÇΩ")
        total += price
    total_nal = total
    total_beznal = int(total * 1.09)
    lines.append(f"\nüí∞ –ò—Ç–æ–≥–æ (–Ω–∞–ª–∏—á–Ω—ã–µ): {total_nal}‚ÇΩ")
    lines.append(f"üí≥ –ò—Ç–æ–≥–æ (–±–µ–∑–Ω–∞–ª +9%): {total_beznal}‚ÇΩ")
    return "\n".join(lines)

def main_menu(user_id: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="menu_categories")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")
    kb.button(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")
    kb.button(text="üë§ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin")
    kb.adjust(1)
    return kb.as_markup()

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã —Ç–µ—Ö–Ω–∏–∫–∏.", reply_markup=main_menu(message.from_user.id))

# --- –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
@dp.callback_query(lambda c: c.data == "menu_categories")
async def show_categories(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    for category in catalog.keys():
        kb.button(text=category, callback_data=f"cat_{category}")
    kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    kb.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data.startswith("cat_"))
async def show_category(callback: types.CallbackQuery):
    category = callback.data.replace("cat_", "")
    kb = InlineKeyboardBuilder()
    for item_id, item in catalog[category].items():
        kb.button(text=f"{item['name']} ({item['price']}‚ÇΩ)", callback_data=f"item_{item_id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_categories")
    kb.adjust(1)
    await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}", reply_markup=kb.as_markup())

# --- –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ ---
@dp.callback_query(lambda c: c.data.startswith("item_"))
async def show_item(callback: types.CallbackQuery):
    item_id = int(callback.data.split("_")[1])
    item = id_to_item[item_id]
    text = f"üì∏ {item['name']}\nüí∞ –¶–µ–Ω–∞: {item['price']}‚ÇΩ\n‚ÑπÔ∏è {item['desc']}"
    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{item_id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_categories")
    kb.adjust(1)
    await callback.message.edit_text(text, reply_markup=kb.as_markup())

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É ---
@dp.callback_query(lambda c: c.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item_id = int(callback.data.split("_")[1])
    carts.setdefault(user_id, {})
    carts[user_id][item_id] = carts[user_id].get(item_id, 0) + 1
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_menu(user_id))

# --- –ö–æ—Ä–∑–∏–Ω–∞ ---
@dp.callback_query(lambda c: c.data == "show_cart")
async def show_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    text = get_cart_text(user_id)
    kb = InlineKeyboardBuilder()
    if carts.get(user_id):
        kb.button(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
        kb.button(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
        kb.button(text="üìÇ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="menu_categories")
    kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    kb.adjust(1)
    await callback.message.edit_text(text, reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    carts[callback.from_user.id] = {}
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await show_cart(callback)

# --- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ---
@dp.callback_query(lambda c: c.data == "checkout")
async def checkout(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not carts.get(user_id):
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    if user_id in users_data:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –î–∞", callback_data="use_saved_contacts")
        kb.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="new_contacts")
        kb.adjust(2)
        await callback.message.answer(
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã?\n\nüë§ {users_data[user_id]['name']}\nüìû {users_data[user_id]['phone']}",
            reply_markup=kb.as_markup()
        )
    else:
        orders_data[user_id] = {"step": "name"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é, –∞ —Ç–∞–∫ –∂–µ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏")

@dp.callback_query(lambda c: c.data == "use_saved_contacts")
async def use_saved_contacts(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    orders_data[user_id] = users_data[user_id].copy()
    orders_data[user_id]["step"] = "rental_period"
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å 25.08 –ø–æ 28.08):")

@dp.callback_query(lambda c: c.data == "new_contacts")
async def new_contacts(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    orders_data[user_id] = {"step": "name"}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é, –∞ —Ç–∞–∫ –∂–µ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏")

@dp.message()
async def handle_order_steps(message: types.Message):
    user_id = message.from_user.id
    if user_id not in orders_data:
        return
    step = orders_data[user_id]["step"]

    if step == "name":
        orders_data[user_id]["name"] = message.text.strip()
        orders_data[user_id]["step"] = "phone"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")

    elif step == "phone":
        orders_data[user_id]["phone"] = message.text.strip()
        users_data[user_id] = {
            "name": orders_data[user_id]["name"],
            "phone": orders_data[user_id]["phone"]
        }
        orders_data[user_id]["step"] = "rental_period"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã:")

    elif step == "rental_period":
        orders_data[user_id]["rental_period"] = message.text.strip()
        orders_data[user_id]["step"] = "comment"
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª):")

    elif step == "comment":
        orders_data[user_id]["comment"] = message.text.strip()
        cart_text = get_cart_text(user_id)
        order_summary = (
            f"üì¶ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑:\n\n{cart_text}\n\n"
            f"–ò–º—è/–Ω–∏–∫: {orders_data[user_id]['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {orders_data[user_id]['phone']}\n"
            f"–ê—Ä–µ–Ω–¥–∞: {orders_data[user_id]['rental_period']}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {orders_data[user_id]['comment']}"
        )
        orders_data[user_id]["step"] = "review"
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")
        kb.adjust(2)
        await message.answer(order_summary, reply_markup=kb.as_markup())

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ---
@dp.callback_query(lambda c: c.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = orders_data[user_id]
    cart_text = get_cart_text(user_id)
    final_text = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{cart_text}\n\n"
        f"–ò–º—è/–Ω–∏–∫: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ê—Ä–µ–Ω–¥–∞: {data['rental_period']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}"
    )
    order = {
        "user_id": user_id,
        "name": data["name"],
        "phone": data["phone"],
        "period": data["rental_period"],
        "comment": data["comment"],
        "items": carts[user_id].copy(),
        "status": "pending"
    }
    all_orders.append(order)
    await send_order_to_admin(order, final_text)
    await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. ‚úÖ")
    carts[user_id] = {}
    orders_data.pop(user_id, None)
    await callback.answer()

async def send_order_to_admin(order, text):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{order['user_id']}")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{order['user_id']}")
    kb.adjust(2)
    await bot.send_message(ADMIN_ID, text, reply_markup=kb.as_markup())
    try:
        await bot.send_message(ADMIN_CHAT_ID, text)
    except Exception:
        pass

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
