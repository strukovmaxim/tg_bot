import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

API_TOKEN = "7638897879:AAGhxCf1nBPNBmVWiXCKjvqdAJWBsj-Jc0k"
ADMIN_ID = 136480596  # —Ç–≤–æ–π Telegram ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–∞—Ç–∞–ª–æ–≥
catalog = {
    "–ö–∞–º–µ—Ä—ã": {
        1: {"name": "Canon C70", "price": 6000},
        2: {"name": "Canon C80", "price": 8000},
    },
    "–û–±—ä–µ–∫—Ç–∏–≤—ã / –û–ø—Ç–∏–∫–∞": {
        3: {"name": "Laowa Ranger 17-50", "price": 4000},
        4: {"name": "DZO Arles", "price": 15000},
    },
    "–ó–≤—É–∫": {
        5: {"name": "Rode NTG-2", "price": 500},
        6: {"name": "Hollyland Mars M1", "price": 2000},
        7: {"name": "Hollyland Solidcom 4S", "price": 4000},
    },
    "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã / –ú–æ–Ω—Ç–∞–∂": {
        8: {"name": "Tilta Nano Focus II", "price": 2300},
        9: {"name": "Tilta Mirage", "price": 1000},
        10: {"name": "–ü–ª–æ—â–∞–¥–∫–∞ V-mount", "price": 1000},
        11: {"name": "Cine saddle", "price": 500},
        12: {"name": "V-mount 99", "price": 500},
        13: {"name": "–¢–µ–ª–µ–≥–∞ OnStage", "price": 1000},
        14: {"name": "–ì—Ä–∏–ø–Ω—è –∏ –∂–µ–ª–µ–∑–∫–∏", "price": 1000},
        15: {"name": "–®—Ç–∞—Ç–∏–≤", "price": 3000},
        16: {"name": "–°—É–º–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è", "price": 700},
    },
    "–§–ª–µ—à–∫–∏ / –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã": {
        17: {"name": "–§–ª–µ—à–∫–∏ 256–≥–±", "price": 500},
        18: {"name": "BP-30a", "price": 500},
        19: {"name": "NP-F970", "price": 500},
    },
}

# –ö–æ—Ä–∑–∏–Ω—ã: user_id ‚Üí { item_id: count }
carts = {}
orders_data = {}

# –ü–æ–¥—Å—á—ë—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã
def get_cart_summary(user_id):
    cart = carts.get(user_id, {})
    total_items = sum(cart.values())
    total_price = 0
    for category, items in catalog.items():
        for item_id, item in items.items():
            if item_id in cart:
                total_price += item["price"] * cart[item_id]
    return total_items, total_price

# –¢–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã
def get_cart_text(user_id):
    cart = carts.get(user_id, {})
    if not cart:
        return "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    for category, items in catalog.items():
        for item_id, item in items.items():
            if item_id in cart:
                qty = cart[item_id]
                price = item["price"] * qty
                text += f"- {item['name']} √ó {qty} ‚Äî {price}‚ÇΩ\n"
                total += price
    text += f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    return text

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(user_id):
    items, price = get_cart_summary(user_id)
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="menu_categories")
    kb.button(text=f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({items} | {price}‚ÇΩ)", callback_data="show_cart")
    kb.button(text="üë§ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin")
    kb.adjust(1)
    return kb.as_markup()

# /start
@dp.message(Command("start"))
async def start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã —Ç–µ—Ö–Ω–∏–∫–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å–æ–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑."
    )
    await message.answer(text, reply_markup=main_menu(message.from_user.id))

# –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º
@dp.callback_query(lambda c: c.data == "contact_admin")
async def contact_admin(callback: types.CallbackQuery):
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É: @maximstrukov")
    await callback.answer()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data == "menu_categories")
async def show_categories(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    for category in catalog.keys():
        kb.button(text=category, callback_data=f"cat_{category}")
    kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    kb.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())

# –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(callback.from_user.id))

# –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data.startswith("cat_"))
async def show_category(callback: types.CallbackQuery):
    category = callback.data.replace("cat_", "")
    kb = InlineKeyboardBuilder()
    for item_id, item in catalog[category].items():
        kb.button(text=f"{item['name']} ({item['price']}‚ÇΩ)", callback_data=f"add_{item_id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_categories")
    kb.adjust(1)
    await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}", reply_markup=kb.as_markup())

# –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(lambda c: c.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item_id = int(callback.data.split("_")[1])
    carts.setdefault(user_id, {})
    carts[user_id][item_id] = carts[user_id].get(item_id, 0) + 1
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_menu(user_id))

# –ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query(lambda c: c.data == "show_cart")
async def show_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    text = get_cart_text(user_id)
    kb = InlineKeyboardBuilder()
    cart = carts.get(user_id, {})
    for item_id, qty in cart.items():
        # –∫–Ω–æ–ø–∫–∏ ‚ûï ‚ûñ
        kb.button(text=f"‚ûï {catalog[next(k for k,v in catalog.items() if item_id in v)][item_id]['name']}", callback_data=f"inc_{item_id}")
        kb.button(text=f"‚ûñ", callback_data=f"dec_{item_id}")
    kb.button(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
    kb.button(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
    kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    kb.adjust(2, 1, 1)
    await callback.message.edit_text(text, reply_markup=kb.as_markup())

# –£–≤–µ–ª–∏—á–∏—Ç—å —Ç–æ–≤–∞—Ä
@dp.callback_query(lambda c: c.data.startswith("inc_"))
async def inc_item(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item_id = int(callback.data.split("_")[1])
    carts[user_id][item_id] += 1
    await show_cart(callback)

# –£–º–µ–Ω—å—à–∏—Ç—å —Ç–æ–≤–∞—Ä
@dp.callback_query(lambda c: c.data.startswith("dec_"))
async def dec_item(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item_id = int(callback.data.split("_")[1])
    if carts[user_id][item_id] > 1:
        carts[user_id][item_id] -= 1
    else:
        del carts[user_id][item_id]
    await show_cart(callback)

# –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    carts[callback.from_user.id] = {}
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await show_cart(callback)

# TODO: —Ç—É—Ç –∂–µ –±—É–¥–µ—Ç checkout ‚Üí –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)

# –ó–∞–ø—É—Å–∫
async def main():
    print("[LOG] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

