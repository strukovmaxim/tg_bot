import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- –ö–æ–Ω—Ñ–∏–≥ ---
API_TOKEN = "7638897879:AAGhxCf1nBPNBmVWiXCKjvqdAJWBsj-Jc0k"
ADMIN_ID = 136480596                      # —Ç–≤–æ–π Telegram ID
ADMIN_CHAT_ID = 0                         # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —á–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –ø–æ—Å—Ç–∞–≤—å ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –ö–∞—Ç–∞–ª–æ–≥ ---
catalog = {
    "–ö–∞–º–µ—Ä—ã": {
        1: {"name": "Canon C70", "price": 6000, "desc": "–ö–∏–Ω–æ–∫–∞–º–µ—Ä–∞ 4K, Super35"},
        2: {"name": "Canon C80", "price": 8000, "desc": "–ö–∏–Ω–æ–∫–∞–º–µ—Ä–∞ —Å 6K —Å–µ–Ω—Å–æ—Ä–æ–º"},
    },
    "–û–ø—Ç–∏–∫–∞": {
        3: {"name": "Laowa Ranger 17-50", "price": 4000, "desc": "–ö–∏–Ω–æ-–∑—É–º –¥–ª—è Super35"},
        4: {"name": "DZO Arles", "price": 15000, "desc": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–∏–Ω–æ-–æ–ø—Ç–∏–∫–∞"},
    },
    "–ó–≤—É–∫": {
        5: {"name": "Rode NTG-2", "price": 500, "desc": "–ü—É—à–∫–∞-–º–∏–∫—Ä–æ—Ñ–æ–Ω"},
        6: {"name": "Hollyland Mars M1", "price": 2000, "desc": "–ú–æ–Ω–∏—Ç–æ—Ä-–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫"},
        7: {"name": "Hollyland Solidcom 4S", "price": 4000, "desc": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞"},
    },
    "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": {
        8: {"name": "Tilta Nano Focus II", "price": 2300, "desc": "Follow Focus"},
        9: {"name": "Tilta Mirage", "price": 1000, "desc": "–ú–∞—Ç–±–æ–∫—Å —Å ND"},
        10: {"name": "–ü–ª–æ—â–∞–¥–∫–∞ V-mount", "price": 1000, "desc": "–ö—Ä–µ–ø–ª–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–π"},
        11: {"name": "Cine saddle", "price": 500, "desc": "–ú—è–≥–∫–∞—è –æ–ø–æ—Ä–∞"},
        12: {"name": "V-mount 99", "price": 500, "desc": "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä 99Wh"},
        13: {"name": "–¢–µ–ª–µ–≥–∞ OnStage", "price": 1000, "desc": "–¢–µ–ª–µ–∂–∫–∞"},
        14: {"name": "–ì—Ä–∏–ø–Ω—è –∏ –∂–µ–ª–µ–∑–∫–∏", "price": 1000, "desc": "–ñ–µ–ª–µ–∑–æ"},
        15: {"name": "–®—Ç–∞—Ç–∏–≤", "price": 3000, "desc": "–®—Ç–∞—Ç–∏–≤"},
        16: {"name": "–°—É–º–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è", "price": 700, "desc": "–°—É–º–∫–∞"},
    },
    "–§–ª–µ—à–∫–∏ / –ê–∫–∫—É–º—ã": {
        17: {"name": "–§–ª–µ—à–∫–∏ 256–≥–±", "price": 500, "desc": "–ö–∞—Ä—Ç—ã –ø–∞–º—è—Ç–∏"},
        18: {"name": "BP-30a", "price": 500, "desc": "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä"},
        19: {"name": "NP-F970", "price": 500, "desc": "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä"},
    },
}

id_to_item = {iid: item for cat in catalog.values() for iid, item in cat.items()}

# --- –î–∞–Ω–Ω—ã–µ ---
carts = {}
orders_data = {}
all_orders = []
users_data = {}

# --- –•–µ–ª–ø–µ—Ä—ã ---
def cart_totals(cart):
    total = sum(id_to_item[iid]["price"] * qty for iid, qty in cart.items())
    return total, int(total * 1.09)

def get_cart_text(user_id):
    cart = carts.get(user_id, {})
    if not cart:
        return "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    lines = ["üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"]
    for iid, qty in cart.items():
        item = id_to_item[iid]
        lines.append(f"- {item['name']} √ó {qty} ‚Äî {item['price']*qty}‚ÇΩ")
    nal, beznal = cart_totals(cart)
    lines.append(f"\nüí∞ –ù–∞–ª–∏—á–Ω—ã–µ: {nal}‚ÇΩ")
    lines.append(f"üí≥ –ë–µ–∑–Ω–∞–ª (+9%): {beznal}‚ÇΩ")
    return "\n".join(lines)

def main_menu(user_id):
    cart = carts.get(user_id, {})
    items = sum(cart.values()) if cart else 0
    total = sum(id_to_item[iid]["price"] * qty for iid, qty in cart.items()) if cart else 0
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="menu_categories")
    kb.button(text=f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({items}|{total}‚ÇΩ)", callback_data="show_cart")
    kb.button(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")
    kb.button(text="üë§ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin")
    kb.adjust(1)
    return kb.as_markup()

# --- Start ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã —Ç–µ—Ö–Ω–∏–∫–∏.", reply_markup=main_menu(message.from_user.id))

# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@dp.callback_query(lambda c: c.data == "menu_categories")
async def show_categories(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    for category in catalog.keys():
        kb.button(text=category, callback_data=f"cat_{category}")
    kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    kb.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("cat_"))
async def show_category(callback: types.CallbackQuery):
    cat = callback.data[4:]
    kb = InlineKeyboardBuilder()
    for iid, item in catalog[cat].items():
        kb.button(text=f"{item['name']} ({item['price']}‚ÇΩ)", callback_data=f"item_{iid}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_categories")
    kb.adjust(1)
    await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}", reply_markup=kb.as_markup())
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("item_"))
async def show_item(callback: types.CallbackQuery):
    iid = int(callback.data.split("_")[1])
    item = id_to_item[iid]
    text = f"üì∏ {item['name']}\nüí∞ {item['price']}‚ÇΩ\n‚ÑπÔ∏è {item['desc']}"
    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{iid}")
    kb.button(text="‚¨ÖÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="menu_categories")
    kb.adjust(1)
    await callback.message.edit_text(text, reply_markup=kb.as_markup())
    await callback.answer()

# --- –ö–æ—Ä–∑–∏–Ω–∞ ---
@dp.callback_query(lambda c: c.data == "show_cart")
async def show_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    text = get_cart_text(user_id)
    kb = InlineKeyboardBuilder()
    cart = carts.get(user_id, {})
    if cart:
        for iid in cart.keys():
            kb.button(text=f"‚ûï {id_to_item[iid]['name']}", callback_data=f"inc_{iid}")
            kb.button(text=f"‚ûñ {id_to_item[iid]['name']}", callback_data=f"dec_{iid}")
        kb.adjust(2)
        kb.button(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
        kb.button(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
    kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    kb.adjust(1)
    await callback.message.edit_text(text, reply_markup=kb.as_markup())
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("inc_"))
async def inc_item(callback: types.CallbackQuery):
    uid = callback.from_user.id
    iid = int(callback.data.split("_")[1])
    if uid in carts and iid in carts[uid]:
        carts[uid][iid] += 1
    await show_cart(callback)

@dp.callback_query(lambda c: c.data.startswith("dec_"))
async def dec_item(callback: types.CallbackQuery):
    uid = callback.from_user.id
    iid = int(callback.data.split("_")[1])
    if uid in carts and iid in carts[uid]:
        carts[uid][iid] -= 1
        if carts[uid][iid] <= 0:
            del carts[uid][iid]
    await show_cart(callback)

# --- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ---
# (–æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –±—ã–ª–æ ‚Äî —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º)
# ...

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º ---
@dp.callback_query(lambda c: c.data.startswith("admin_confirm_"))
async def admin_confirm(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    user_id = int(callback.data.split("_")[2])
    for order in reversed(all_orders):
        if order["user_id"] == user_id and order["status"] == "pending":
            order["status"] = "confirmed"
            lines, total = ["‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n"], 0
            for iid, qty in order["items"].items():
                item = id_to_item[iid]
                total += item["price"] * qty
                lines.append(f"- {item['name']} √ó {qty} ‚Äî {item['price']*qty}‚ÇΩ")
            nal, beznal = total, int(total*1.09)
            lines.append(f"\nüí∞ –ù–∞–ª–∏—á–Ω—ã–µ: {nal}‚ÇΩ")
            lines.append(f"üí≥ –ë–µ–∑–Ω–∞–ª (+9%): {beznal}‚ÇΩ")
            lines.append(f"üìÖ –ü–µ—Ä–∏–æ–¥: {order['period']}")
            lines.append(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['comment']}")
            kb = InlineKeyboardBuilder()
            kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            await bot.send_message(user_id, "\n".join(lines), reply_markup=kb.as_markup())
            await callback.message.edit_text(callback.message.text + "\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            await callback.answer()
            return
    await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
